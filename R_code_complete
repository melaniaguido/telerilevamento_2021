#R_code_complete 
#Comprende tutti i codici fatti a lezione 

#remote sensing first code
# My first code in R for remote sensing 

#install.packages("raster") per installare un pacchetto in R

library(raster) #questo è per spiegare a R che vogliamo usare il pacchetto raster 

setwd("C:/lab/") #importare in R la cartella desiderata 

#brick è una delle funzioni all'interno del pacchetto raster 
#un raster brick è un oggetto raster multistrato 

p224r63_2011 <- brick("p224r63_2011_masked.grd") #asscoiamo l'immagine importata tramite brick ad un nome 

p224r63_2011 #rasterbrick cioè una serie di bande in formato raster 

plot(p224r63_2011) #Plot è una funzione generica per la stampa di oggetti R 

#colorRampPalette comando con cui siamo noi a stabilire la variazione dei colori 
#per spiegare a R che sono tutti elementi della stessa cosa, vanno racchiusi nello  stesso vettore/array
#inseriamo quindi una c davanti ai colori ed una parentesi che racchiude tutto 

cl <- colorRampPalette (c("black","grey","light grey"))  (100) #100 il numero di livelli che assegno io 

plot(p224r63_2011, col=cl) #primo argomento immagine che vogliamo plottare, secondo argomento il colore che vogliamo dare 

## Day2 

#colour change -> new, impostiamo dei colori a piacere 

cl <- colorRampPalette (c("blue","pink","red","yellow","green")) (100)
plot(p224r63_2011, col=cl)

## Day 3 

#Richiamo il pacchetto raster già creato e poi importo la cartella lab 
library(raster)
setwd("C:/lab/")

#Carico il dataset 

p224r63_2011 <- brick("p224r63_2011_masked.grd")

#plot attraverso la color ramp palet della nostra immagine 

cl <- colorRampPalette (c("blue","pink","red","yellow","green"))  (100)
plot(p224r63_2011, col=cl)

#interrogo l'immagine per avere info su tutte le bande che la compongono 
p224r63_2011

#Bande di landsat 
#B1: banda del blu
#B2: banda del verde
#B3: banda del rosso 
#B4: infrarosso vicino (la prima lunghezza d'onda dopo il rosso)
#B5: infrarosso medio 
#B6: infrarosso termico 
#B7: infrarosso medio 

#ripulisce la finestra grafica così tutte le impostazione partono da zero 
dev.off()

plot(p224r63_2011$B1_sre)
#plot ban 1 con con una scala di colori predefinita dalla color ramp palette 

cl <- colorRampPalette (c("blue","pink","red","yellow","green"))  (100)
plot(p224r63_2011$B1_sre, col=cl)

#facciamo un nuovo plottaggio con due bande di colore una di fianco all'altra 
#utilizzo il comando par per stabilire come voglio fare il plottaggio 
#par serve per mettere tutte le immagini in una stessa finestra, e sistemarle come preferisco
#Se per il primo numero vogliamo indicare le righe mettiamo "mfrow" mentre se vogliamo indicare prima le colonne scriviamo "mfcol"

# 1 riga, 2 colonne
par(mfrow=c(1,2))
plot(p224r63_2011$B1_sre)
plot(p224r63_2011$B2_sre)

#2 righe, 1 colonna 
par(mfrow=c(2,1))
plot(p224r63_2011$B1_sre)
plot(p224r63_2011$B2_sre)

#plot le prime quattro bande di landsat 
par(mfrow=c(4,1))
plot(p224r63_2011$B1_sre)
plot(p224r63_2011$B2_sre)
plot(p224r63_2011$B3_sre)
plot(p224r63_2011$B4_sre)

#2 righe, 2 colonne 
par(mfrow=c(2,2))
plot(p224r63_2011$B1_sre)
plot(p224r63_2011$B2_sre)
plot(p224r63_2011$B3_sre)
plot(p224r63_2011$B4_sre)

#mettiamo per ogni banda una color ramp palette che richiami il colore di quella banda 
par(mfrow=c(2,2))

clb <- colorRampPalette (c("dark blue","blue","light blue"))  (100)
plot(p224r63_2011$B1_sre, col=clb)

clv<- colorRampPalette (c("dark green","green","light green"))  (100)
plot(p224r63_2011$B2_sre, col=clv)

clr<- colorRampPalette (c("dark red","red","pink"))  (100)
plot(p224r63_2011$B3_sre, col=clr)

clnir<- colorRampPalette (c("red","orange","yellow"))  (100)
plot(p224r63_2011$B4_sre, col=clnir)


#Day 4 Visualizing data by RGB plotting
#Richiamiamo la libreria raster e selezioniamo la nostra cartella di riferimento lab 

library(raster)
setwd("C:/lab/")

#vado a richimare anche la nostra immagine 
p224r63_2011 <- brick("p224r63_2011_masked.grd")

#Bande di landsat 
#B1: banda del blu
#B2: banda del verde
#B3: banda del rosso 
#B4: infrarosso vicino (la prima lunghezza d'onda dopo il rosso)
#B5: infrarosso medio 
#B6: infrarosso termico 
#B7: infrarosso medio

#RGB -> abbiamo tre colori fondamentali (rosso, verde, blu) e in base a come vengono mischiati otteniamo tutti gli altri colori 
#Posso usare solo tre bande per volta per visualizzare l'immagine, nella componente red montiamo la banda n3, nella componente green la banda n2 e nella componente blu la n1
#La funzione che ci permette di fare ciò è la funzione plot, abbiamo un oggetto raster multi-layered(molte bande) e attraverso lo schema RGB andiamo ad utilizzarle 

plotRGB(p224r63_2011, r=3, g=2, b=1, stretch="Lin") #associo ogni singola banda ad un componente dello schema RGB
#stretch -> prendiamo i valori delle singole banda, riflettanza, e li "tiriamo" per far si che non ci sia uno schiacciamento da una parte o dall'altra del colore, quindi vediamo più colori 
#abbiamo ottenuto un'immagine a colori nataruali 

plotRGB(p224r63_2011, r=4, g=3, b=2, stretch="Lin") #L'immagine appare rossa perchè avendo montato la banda dell'infrarosso sulla componente red, tutti gli oggetti con alta riflettanza assumeranno il colore a cui è stata associata la banda n4  
plotRGB(p224r63_2011, r=3, g=4, b=2, stretch="Lin") #Questa volta siccome abbiamo montato la banda dell'infrarosso sulla componente green, tutta la vegetazione appare verde fluorescente (viola suolo nudo) 
plotRGB(p224r63_2011, r=3, g=2, b=4, stretch="Lin") # Qui vediamo il suolo nudo giallo e la vegetazione blu sempre per lo stesso motivo di sopra 

#exercise mount a 2x2 multiframe 
par(mfrow=c(2,2))
plotRGB(p224r63_2011, r=3, g=2, b=1, stretch="Lin")
plotRGB(p224r63_2011, r=4, g=3, b=2, stretch="Lin")
plotRGB(p224r63_2011, r=3, g=4, b=2, stretch="Lin")
plotRGB(p224r63_2011, r=3, g=2, b=4, stretch="Lin")

#Per salvare l'immagine in PDF nella cartella di riferimento utilizzo la funzione dedicata pdf()

pdf("il_mio_primo_pdf_con_R.pdf")
par(mfrow=c(2,2))
plotRGB(p224r63_2011, r=3, g=2, b=1, stretch="Lin")
plotRGB(p224r63_2011, r=4, g=3, b=2, stretch="Lin")
plotRGB(p224r63_2011, r=3, g=4, b=2, stretch="Lin")
plotRGB(p224r63_2011, r=3, g=2, b=4, stretch="Lin")
Dev.off()

#Plottiamo l'immagine con lo stretch histogram

plotRGB(p224r63_2011, r=3, g=4, b=2, stretch="hist") #Otteniamo un'immagine in cui vediamo molti dettagli che prima non vedevamo 

#Creiamo un par dove abbiamo l'immagine a colori naturali, colori falsati e colori falsati con lo stretch histogram 
par(mfrow=c(3,1))
plotRGB(p224r63_2011, r=3, g=2, b=1, stretch="Lin")
plotRGB(p224r63_2011, r=3, g=4, b=2, stretch="Lin")
plotRGB(p224r63_2011, r=3, g=4, b=2, stretch="hist")

#Siamo quindi partiti da un'immagine esattamente come la vedrebbe l'occhio umano,quindi con pochissima differenziazione 
#E siamo arrivati, tramite lo stretch per istogrammi, ad un'immagine che indivdua tutti i differenti componenti all'interno della foresta 

#A differenza di quando usiamo la funzione color ramp palette in cui siamo noi a scegliere i colori, usando la funzione plotRGB vediamo i colori reali 

#Day5

library(raster)
setwd("C:/lab/")
p224r63_2011 <- brick("p224r63_2011_masked.grd")
p224r63_2011
#la funzione brick importa un intero set di dati creando un blocco di diversi raster insieme 
#Multitemporal set 
#Carico una nuova immagine 
p224r63_1988 <- brick("p224r63_1988_masked.grd") #Associamo il set di dati ad un nome scelto da noi 
#Abbiamo quindi importato un nuovo file 
p224r63_1988 #scriviamo il nome per avere le info sul file 

plot(p224r63_1988) #visualizziamo così le singole bande 

#Bande di landsat 
#B1: banda del blu
#B2: banda del verde
#B3: banda del rosso 
#B4: infrarosso vicino (la prima lunghezza d'onda dopo il rosso)
#B5: infrarosso medio 
#B6: infrarosso termico 
#B7: infrarosso medio
#plotRGB associo ogni singola banda ad un componente dello schema RGB
plotRGB(p224r63_1988, r=3, g=2, b=1, stretch="Lin")

#plottiamo l'immagine usando l'infrarosso e lo associamo alla componente red  
plotRGB(p224r63_1988, r=4, g=3, b=2, stretch="Lin")

#Creiamo uno schema con 2 righe ed 1 colonna inserendo l'immagine del 1988 e del 2011 
par(mfrow=c(2,1))
plotRGB(p224r63_1988, r=4, g=3, b=2, stretch="Lin")
plotRGB(p224r63_2011, r=4, g=3, b=2, stretch="Lin")

#Creiamo uno schema 2x2 con stretch lineare e histogram 
par(mfrow=c(2,2))
plotRGB(p224r63_1988, r=4, g=3, b=2, stretch="Lin")
plotRGB(p224r63_2011, r=4, g=3, b=2, stretch="Lin")
plotRGB(p224r63_1988, r=4, g=3, b=2, stretch="hist")
plotRGB(p224r63_2011, r=4, g=3, b=2, stretch="hist")

#Creiamo il pdf
pdf("multitemp.pdf")
par(mfrow=c(2,2))
plotRGB(p224r63_1988, r=4, g=3, b=2, stretch="Lin")
plotRGB(p224r63_2011, r=4, g=3, b=2, stretch="Lin")
plotRGB(p224r63_1988, r=4, g=3, b=2, stretch="hist")
plotRGB(p224r63_2011, r=4, g=3, b=2, stretch="hist")
dev.off()


#R code time series
#Time series analysis
#Greenland increase of temperature 
#Data and code from Emanuela Cosma 

#install.packages("raster")
library(raster)

setwd("C:/lab/greenland")

#Non abbiamo un unico file, ma ne abbiamo 4 differenti, per cui non possiamo utilizzare la funzione brick
#Ogni strato in questo caso rappresenta la stima della temperatura (lst) che deriva dal programma copernicus 
#andiamo quindi ad importare i singoli dataset 

#Utilizziamo la funzione raster:create a rasterlayer object
lst_2000 <- raster("lst_2000.tif")
plot(lst_2000)
lst_2005 <- raster("lst_2005.tif")
plot(lst_2005)

#Maggiore è il valore del digital number maggiore sarà il valore della temperatura in queste immagini 
lst_2010 <- raster("lst_2010.tif")
plot(lst_2010)
lst_2015 <- raster("lst_2015.tif")
plot(lst_2015)

#par 2x2 
par(mfrow=c(2,2))
plot(lst_2000)
plot(lst_2005)
plot(lst_2010)
plot(lst_2015)

#Utilizziamo un metodo per importare tutte le immagini insieme 
#la funziole "lapply" serve ad applicare una certa funzione ad una lista di file 
#la funzione "list.files" serve a creare la lista di file che r utilizzerà poi per applicare la funzione lapply 
#iniziamo quindi a creare la nostra lista di file
#attraverso "pattern" cerchiamo i files che ci interessano
list.files()
rlist <- list.files(pattern="lst")
rlist 
#abbiamo quindi ottenuto la lista di file a cui applicare la funzione raster 
#lapply applica un'altra funzione ad una lista di file
lapply(rlist, raster) #applichiamo la funzione lapply alla lista di file ottenuta(rlist), e utilizziamo la funzione raster che importa tutti i file 
import <- lapply(rlist, raster) 
import
#Vado ad unire tutti i file importati in un unico file 
TGr <- stack(import) #la funzione stack mi permette di avere un unico file tutto insieme che mi aiuta per esempio a fare direttamente un plot senza utilizzare la funzione par 
plot(TGr)

plot(TGr)
plotRGB(TGr, 1, 2, 3, stretch="Lin")
plotRGB(TGr, 2, 3, 4, stretch="Lin")
plotRGB(TGr, 4, 3, 2, stretch="Lin")

#Day2

library(rasterVis) #il pacchetto rasterVis contiene metodi di visualizzazione per i dati raster 
setwd("C:/lab/greenland")
#importo alcuni dati della scorsa lezione
rlist <- list.files(pattern="lst")
import <- lapply(rlist, raster) 
TGr <- stack(import)

#levelplot è una funzione che mi permette di usare il blocco intero di file, una singola leggenda e facciamo un plot unico 
levelplot(TGr) 

#Cambiamo la palette dei colori 
cl<-colorRampPalette(c("blue","light blue","pink", "red")) (100)
levelplot(TGr,col.regions=cl) #col.regions è l'argomento usato da levelplot per cambiare colore 
#Abbiamo fatto un plot con colori che abbiamo stabilito noi e possiamo vedere multitemporalmente cosa è successo nelle zone che stiamo osservando 

#Andiamo a cambiare il nome agli attributi, names.attr argomento della funzione plot per nominare i sisngoli attributi 
levelplot(TGr,col.regions=cl, names.attr=c("July2000","July2005","July2010","July2015"))
#Inseriamo il titolo della nostra mappa finale attraverso "main"
levelplot(TGr,col.regions=cl, main= "LST variation in time", names.attr=c("July2000","July2005","July2010","July2015"))

#Utilizziamo i dati di Melt 
#Abbiamo molti dati, fare un raster per ognuno sarebbe troppo lungo, per cui facciamo la lista con la funzione list.files
meltlist<-list.files(pattern="melt")
#Applichiamo a questa lista la funzione lapply, e applichiamo la funzione raster 
melt_import<-lapply(meltlist,raster) #Stiamo quindi importando tutti i dati con un'unica funzione
#Facciamo quindi il levelplot di melt 
#Facendo lo stack raggruppo tutti i file appena importati con questa funzione 
melt <- stack(melt_import)
melt 

#facciamo il levelplot
levelplot(melt)

#Andiamo a prendere l'immagine del 1979 e del 2007 e vogliamo fare la sottrazione tra il primo dato e il secondo e a questa sottrazione associare un nome 
#Nella funzione inseriamo il $ che va a legare il file originale allo strato interno 
melt_amount <- melt$X2007annual_melt - melt$X1979annual_melt #Abbiamo fatto la sottrazione tra i due strati

#Visto che è una singola immagine andiamo a fare un plot veloce 
#Creiamo la color palette 
clb <-colorRampPalette(c("blue","white","red")) (100)
plot(melt_amount, col=clb)
#Nell'immagine che otteniamo, tutte le zone rosse sono quelle dove dal 1979 al 2007 c'è stato uno scioglimento del ghiaccio(melt) più alto 
#Otteniamo questo risultato perchè abbiamo sottratto al melt del 2007 quello del 1997

#Andiamo a fare il level plot 
levelplot(melt_amount, col.regions=clb)

#Abbiamo visto come utilizzare un set di dati multitemporali e poter visualizzare tutti i dati insieme con level plot e visualizzare anche la loro differenza 


#R_code_copernicus.r
#Prepariamo il nostro codice per i dati copernicus 

#Le librerie che ci serviranno sono la raster e la ncdf4 che ci serve per leggere il formato dei dati che abbiamo scaricato da copernicus 
library(raster)
install.packages("ncdf4")
library(ncdf4)
setwd("C:/lab/")

#dobbiamo scegliere il nome da dare al nostro dataset, utilizzo FCOVER
#utilizziamo raster perchè  è un singolo file, se erano di più avremmo utilizzato brick
FCOVER <- raster ("c_gls_FCOVER-RT0_202006300000_GLOBE_PROBAV_V2.0.1.nc")

#possiamo fare ora il primo plot
#siccome non usiamo uno schema RGB, possiamo decidere noi la color ramp 

cl <- colorRampPalette(c('light blue','green','red','yellow'))(100)
plot(FCOVER, col=cl)

#Andiamo a ricampionare il file, a ridurre quindi la risoluzione in modo che sia più gestibile 
#Per alleggerire l'immagine prendo un pixel più grande e all'interno del pixel estraggo la media di tutti i valori al suo interno 
#Trasformo quindi l'immagine con un numero inferiore di pixel 
#Per fare  ciò possiamo utilizzare fact, nel mio caso fact=100 diminuisco linearmente di 100 volte 
FCOVERres <- aggregate(FCOVER, fact=100)
#a questo punto facendo un plot, si può vedere come la variabile è molto più veloce da visualizzare perchè i pixel al suo interno sono più grandi 

#R_code_knitr.r

setwd("C:/lab/") 

#knitr all'interno di R genera un report
library(knitr) #richiamo il pacchetto knitr 

#Utilizziamo la funzione stitch, come prima cosa dobbiamo inserire come si chiama il nostro codice 
#gli altri argomenti sono il template che utilizziamo, misc e il file del template
#inseriamo poi il nome del pacchetto da utilizzare 
stitch("R_code_Greenland.r.txt", template=system.file("misc", "knitr-template.Rnw", package="knitr"))


#R_code_multivariate_analysis.r

#Carichiamo i pacchetti 
library(raster)
library(RStoolbox)

#Settiamo la wd 
setwd("C:/lab/") 

#Carichiamo l'immagine 
#Questa immagine ha 7 bande, per caricarla utilizziamo la funzione brick che serve a caricare un set multiplo di dati 
p224r63_2011 <-brick("p224r63_2011_masked.grd")
p224r63_2011 #Visualizziamo le informazioni 
#visualizziamola
plot(p224r63_2011)#Ovviamente avremo 7 immagini, una per ogni banda 

#Plottiamo i valori della banda del blu contro i valori della banda del verde 
plot(p224r63_2011$B1_sre, p224r63_2011$B2_sre, col="red", pch=25, cex=2) #pch cambiamo i simboli, cex cambiamo la dimensione

#La funzione pairs serve per plottare tutte le correlazioni possibili in tutti i dataset 
#Mette in correlazioni a due a due tutte le variabili di un certo dataset 
#In questo caso le nostre variabili sono le bande
pairs(p224r63_2011) #Sulla parte alta troveremo l'indice di correlazione, se si è positivamente correlati l'indice va ad uno, al contrario va a -1



#Day2 
#Carichiamo i pacchetti 
library(raster)
library(RStoolbox)

#Settiamo la wd, selezioniamo la cartella di riferimento 
setwd("C:/lab/")
#Carichiamo l'immagine da utilizzare 
p224r63_2011 <-brick("p224r63_2011_masked.grd")

#attraverso la funzione pairs otteniamo i grafici che ci mostrano la relazione tra le bande 
pairs(p224r63_2011)

#La PCA è un'analisi impattante quindi un'idea sarebbe ricampionare il nostro dato, crearne quindi uno più leggero 
#Attraverso la funzione aggregate andiamo ad aggregare i pixel ottenendo una risoluzione più bassa 
#res= resampling -> ricampionamento 
p224r63_2011res <- aggregate(p224r63_2011, fact=10) #Fact è il fattore di ricampionamento, quante volte vogliamo ingradire i pixel 

#per vedere il risultato facciamo un plot mettendo insieme l'immagine originale e  quella ricampionata 
par(mfrow=c(2,1))
plotRGB(p224r63_2011, r=4, g=3, b=2, stretch="lin")
plotRGB(p224r63_2011res, r=4, g=3, b=2, stretch="lin")
 
#La PCA Esegue l'analisi dei componenti principali (PCA) con individui supplementari, variabili quantitative supplementari e variabili categoriali supplementari. I valori mancanti vengono sostituiti dalla media della colonna.
#La rasterPCA prende il pacchetto di dati e va a compattarli in un numero minore di bande 
p224r63_2011res_pca <- rasterPCA(p224r63_2011res)

#Andiamo a legare attraverso $ due componenti 
#In questo caso leghiamo l'immagine al modello
summary(p224r63_2011res_pca$model) #summary è una funzione generica, in questo caso ci da un sommario del nostro modello 

#Visualizziamo le varie componenti 
#Leghiamo l'immagine a map perchè andiamo ad unire l'immagine con la mappa del modello 
#Qui stiamo plottando la mappa risultante dal modello di prima 
plot(p224r63_2011res_pca$map) #La prima componente sarà quella migliore, dove si vede tutto, nell'ultima non si distingue praticamente nulla
#Questo perchè la componente uno è quella che spiega più variabilità

#Facciamo  un plot con le 3 componenti principali 
plotRGB(p224r63_2011res_pca$map, r=1, g=2, b=3, stretch="lin")

#R_code_classification.r

#Settiamo la nostra wd 
setwd("C:/lab/")
library(raster)
library(RStoolbox)

#Carichiamo l'immagine 
#L'immagine rappresenta i diversi livelli di energia del sole nella parte interessata 
so <- brick("Solar_Orbiter_s_first_views_of_the_Sun_pillars.jpg") 
#La funzione brick permette di prendere un'immagine dall'esterno di r 
#Immagine RGB con diversi livelli 
so

#Facciamo il plottaggio 
#inseriamo il nome dell'immagine,i 3 livelli e infine lo stretch
plotRGB(so, 1,2,3, stretch="lin")

#Classifichiamo l'immagine 
#La funzione è unsuperClass (Unsupervided classification) 
#All'interno del pacchetto Rstoolbox opera la classificazione non supervisionata
soc <- unsuperClass(so, nClasses=3) #Nella funzione inseriamo il nome dell'immagine e il numero di classi 
#Una volta fatta la classificazione (abbiamo creato un modello di classificazione), possiamo fare il plot dell'immagine 
plot(soc$map)
#Utilizziamo una funzione che fa in modo che esca la stessa classificazione per tutti 
#Per fare ciò utilizziamo la funzione set.seed
set.seed(42)

#Aumentiamo il numero delle classi per vedere cosa vede il software
socl <- unsuperClass(so, nClasses=20)
plot(socl$map)

#Day 2 

#Grand Canyon 
#https://landsat.visibleearth.nasa.gov/view.php?id=80948
# When John Wesley Powell led an expedition down the Colorado River and through the Grand Canyon in 1869, he was confronted with a daunting landscape. At its highest point, the serpentine gorge plunged 1,829 meters (6,000 feet) from rim to river bottom, making it one of the deepest canyons in the United States. In just 6 million years, water had carved through rock layers that collectively represented more than 2 billion years of geological history, nearly half of the time Earth has existed.

#Carichiamo le librerie 
library(raster)
library(RStoolbox)
#settiamo la wd 
setwd("C:/lab/")

#L'immagine che utilizziamo è una RGB, è formata quindi da tre livelli, per caricare questo tipo di immagine utilizziamo la funzione brick 
gc <- brick("dolansprings_oli_2013088_canyon_lrg.jpg")
gc

#Visualizziamo la nostra immagine tramite la funzione plotRGB
#Abbiamo  un oggetto raster con più strati e attraverso questa funzione andiamo a plottarli 
plotRGB(gc, 1,2,3, stretch="lin")
#Cambiamo la visualizzazione tramite lo stretching da lineare a histogram dove vengono utitlizzate tutte le bande possibili per visualizzare l'immagine 
plotRGB(gc, 1,2,3, stretch="hist")

#Utilizziamo la funzione unsuperClass
gcc2 <- unsuperClass(gc, nClasses=2)
gcc2 #Visualizzo i dati 
plot(gcc2$map)

#Aumentiamo in numero di classi 
gcc4 <- unsuperClass(gc, nClasses=4)
gcc4 #Visualizzo i dati 
plot(gcc4$map)


#R_code_vegetation_indices.r 

library(raster) #Carichiamo la libreria che ci serve 
setwd("C:/lab/") #Settiamo la wd

#Utilizziamo la funzione brick per caricare un set di dati 
#In questo caso andiamo a caricare le immagini che ci interessano
defor1 <- brick("defor1.jpg")
defor2 <- brick("defor2.jpg")

#Andiamo a fare il plot delle due immagini 
par(mfrow=c(2,1))
#b1=NIR, b2=red, b3=green
plotRGB(defor1, r=1, g=2, b=3, stretch="lin")
plotRGB(defor2, r=1, g=2, b=3, stretch="lin")

#Andiamo a calcolare l'indice di vegetazione sia per l'immagine più datata che per quella più recente 
#Digitiamo in r il nome del file originario per vedere come si chiamano le bande del NIR e del red che ci serviranno per l'indice 
defor1 #In questo caso il NIR si chiama defor1.1 e il red si chiama defor1.2 
#Dichiariamo il nome del dataset e il nome della banda uniti tramite $
dvi1 <- defor1$defor1.1 - defor1$defor1.2 #il meno è un'operazione algebrica 
#Per ogni pixel stiamo prendendo la banda dell'infrarosso e quella del rosso, e facciamo la sottrazione per i due valori del pixel
#In uscita abbiamo una mappa formata da tanti pixel che sono la diferenza tra NIR e red e quindi il DVI 

#Viasualizziamo la mappa 
plot(dvi1) #quest'immagine rappresenta molto bene lo stato di salute della vegetazione 
#Facciamo una nuova visualizzazione cambiano la color ramp palette 
cl <- colorRampPalette(c('darkblue','yellow','red','black'))(100) # specifying a color scheme
plot(dvi1, col=cl, main="DVI at time 1") 

#Facciamo la stessa cosa per la seconda immagine 
defor2 #Per visualizzare il nome del NIR e red 
dvi2 <- defor2$defor2.1 - defor2$defor2.2 
#Visualizziamo la mappa 
plot(dvi2)
#Cambiamo la palette 
cl <- colorRampPalette(c('darkblue','yellow','red','black'))(100)
plot(dvi2, col=cl, main="DVI at time 2")

#Facciamo il plot delle due immagiini insieme così da fare un confronto 
par(mfrow=c(2,1))
plot(dvi1, col=cl, main="DVI at time 1")
plot(dvi2, col=cl, main="DVI at time 2")

#Generiamo una mappa dove avremo la differenza tra il DVI della prima immagine e il DVI della seconda 
difdvi <- dvi1 - dvi2 
#Facciamo il plot 
cld <- colorRampPalette(c('blue','white','red'))(100)
plot(difdvi, col=cld) #Questa mappa ci permette di vedere quali sono i punti all'interno dell'area dove c'è stata una sofferenza da parte nella vegetazione nel tempo 

#Calcoliamo l'NDVI (normalizza i nostri valori sulla somma delle variabili)
# (NIR-RED) / (NIR+RED)
ndvi1 <- (defor1$defor1.1 - defor1$defor1.2) / (defor1$defor1.1 + defor1$defor1.2)
#Facciamo il plot 
plot(ndvi1, col=cl) 

#Facciamo la stessa cosa per la seconda immagine 
ndvi2 <- (defor2$defor2.1 - defor2$defor2.2) / (defor2$defor2.1 + defor2$defor2.2)
#Facciamo il plot 
plot(ndvi2, col=cl)

#Andiamo a fare la differenza tra i due NDVI
difndvi <- ndvi1 - ndvi2
plot(difndvi, col=cld)

#Richiamiamo il pacchetto Rstoolbox che ci servirà per le prossime funzioni 
library(RStoolbox) #In questo caso ci servirà per il calcolo degli indici di vegetazione 

#La funzione che utilizziamo è spectralIndices che calcola diversi indici e permette di visualizzarli insieme 
#Facciamolo per la prima immagine
vi1 <- spectralIndices(defor1, green = 3, red = 2, nir = 1)
plot(vi1, col=cl)
#Facciamo la stessa cosa per la seconda immagine
vi2 <- spectralIndices(defor2, green = 3, red = 2, nir = 1)
plot(vi2, col=cl)

#Andiamo a riclassificare l'immagine originale copNDVI
#cbind è argomento a funzione, e cambia dei valori 
#I pixel con valori 253, 254 e 255 (acqua) possono essere trasformati in NA(non valori) 
copNDVI <- reclassify(copNDVI, cbind(253:255, NA))
plot(copNDVI)

#Richiamiamo il pacchetto rasterVis per utilizzare la funzione levelplot
library(rasterVis)
levelplot(copNDVI) 


#R_Code_land_cover.r 
#analisi multitemporale di variazione della land cover

#Setto la wd 
setwd("C:/lab/")

#Importo le librerie che mi serviranno 
library(raster)
library(RStoolbox) #Ci serve per la classificazione 
library(ggplot2) 

#Importo le immagini su cui andremo a lavorare 
defor1 <- brick("defor1.jpg") 
defor2 <- brick("defor2.jpg")

defor1
# names: defor1.1, defor1.2, defor1.3 
# defor1.1 = NIR
# defor1.2 = red
# defor1.3 = green

#Plottiamo le due immagini 
plotRGB(defor1, r=1, g=2, b=3, stretch="Lin")
plotRGB(defor2, r=1, g=2, b=3, stretch="Lin")

#Abbiamo un'immagine con 3 bande, e possiamo creare un'immagine singola delle 3 bande usando ggRGB
#Abbiamo bisogno dell'immagine da plottare, delle 3 componenti RGB e possiamo utilizzare anche qui lo stretch
ggRGB(defor2, r=1, g=2, b=3, stretch="lin")
ggRGB(defor1, r=1, g=2, b=3, stretch="lin")

#Plottiamo le due immagini insieme 
par(mfrow=c(2,1))
plotRGB(defor1, r=1, g=2, b=3, stretch="Lin")
plotRGB(defor2, r=1, g=2, b=3, stretch="Lin")

#La funzione dedicata a ggplot per ottenere lo stesso risultato ottenuto con par è grid.arrange
#Vado a richiamare la libreria dedicata per utilizzare questa funzione
library(gridExtra)
#Vado a fare il plot delle due immagine utilizzando ggRGB
p1 <- ggRGB(defor1, r=1, g=2, b=3, stretch="lin")
p2 <- ggRGB(defor2, r=1, g=2, b=3, stretch="lin")
grid.arrange(p1, p2, nrow=2) #grafici in una pagina 

#Classificazione non supervisionata 
d1c <- unsuperClass(defor1, nClasses=2)
#Facciamo il plot 
plot(d1c$map)
#Modifichiamo la palette colori 
cl <- colorRampPalette(c('black','green'))(100) 
plot(d1c$map, col=cl)

#classificare con due classi l'immagine satellitare defor2
d2c <- unsuperClass(defor2, nClasses=2)
plot(d2c$map, col=cl)

# plot delle due mappe ottenute
par(mfrow=c(2,1))
plot(d1c$map, col=cl)
plot(d2c$map, col=cl)

par(mfrow=c(1,2))
plot(d1c$map, col=cl)
plot(d2c$map, col=cl)

#Proviamo a fare una classificazione con 3 classi 
d2c3 <- unsuperClass(defor2, nClasses=3)
plot(d2c3$map)

#Vogliamo clacolare la frequenza dei pixel di una certa classe, quante volte ho determinati pixel di una certa classe 
#Utilizziamo la funzione freq che va a calcolare la frequenza 
freq(d1c$map) #In questo caso vogliamo sapere la frequenza delle due classi nella mappa che abbiamo generato 
#I valori ottenuti sono :  
#value  count
#[1,]     1  34249
#[2,]     2 307043
s1 <- 34249 + 307043 #Somma di tutti i pixel 
#Qual è la frequenza dei pixel di foresta? 
prop1 <- freq(d1c$map)/s1 #Otteniamo così le proporzioni 
# value    count
#[1,] 2.930042e-06 0.100351 #10% agricolo
#[2,] 5.860085e-06 0.899649 #89.96% foresta 
#Andiamo a fare la stessa cosa per la seconda mappa 
s2 <- 342726
prop2 <- freq(d2c$map)/s2
#value     count
#[1,] 2.917783e-06 0.5192428 #foresta 51.9%
#[2,] 5.835565e-06 0.4807572 #agricoltura 48.07%

#Andiamo a generare un dataset che in r si chiama dataframe 
cover <- c("Forest","Agriculture") #cover è formata dalle componenti forest e agriculture
percent_1992 <- c(89.96, 10.03) 
percent_2006 <- c(51.92, 48.07)
#data.frame è la funzione che mi permette di creare i dataframe in r
percentages <- data.frame(cover, percent_1992, percent_2006) #Andiamo a definire le colonne 
percentages
#      cover        percent_1992 percent_2006
#1      Forest        89.96        51.92
#2 Agriculture        10.03        48.07

#Andiamo a fare il plot 
#La funzione ggplot e plotta un dataset e poi ha una parte chiamata aestetich, scriviamo la prima e la seconda colonna  e il colore 
#Attraverso geom_bar vado a definire la visualizzazione 
ggplot(percentages, aes(x=cover, y=percent_2006, color=cover)) + geom_bar(stat="identity", fill="white")

#Andiamo a fare il plot di tutte e due utilizzando ggplot 
p1 <- ggplot(percentages, aes(x=cover, y=percent_1992, color=cover)) + geom_bar(stat="identity", fill="white")
p2 <- ggplot(percentages, aes(x=cover, y=percent_2006, color=cover)) + geom_bar(stat="identity", fill="white")
grid.arrange(p1, p2, nrow=1) #Attraverso grid.arrange andiamo a mettere i due grafici vicini nello stessa pagina 


#R_code_variability.r 

#Carichiamo le librerie che ci serviranno 
library(raster)
library(RStoolbox)
library(ggplot2) #per ggplot plotting
library(viridis) #Colorare i plot di ggplot in modo automatico
library(gridExtra)

#settiamo la wd 
setwd("C:/lab/")

#Importiamo l'immagine 
sentinel <- brick("sentinel.png")
sentinel
#NIR1, RED2, GREEN3
#r=1, g=2, b=3 siccome questa è esattamente la composizione di default possiamo anche evitare di scriverle 
plotRGB(sentinel) #Visualizziamo l'immagine, utilizzando la funzione plotRGB essendo la nostra immagine a tre componenti
#Se cambiamo la posizione delle bande allora diventa 
plotRGB(sentinel, r=2, g=1, b=3, stretch="lin")

#Per fare il calcolo della deviazione standard possiamo utilizzare una sola banda 
sentinel_pca <- rasterPCA(sentinel)

sentinel
#class      : RasterBrick 
#dimensions : 794, 798, 633612, 4  (nrow, ncol, ncell, nlayers)
#resolution : 1, 1  (x, y)
#extent     : 0, 798, 0, 794  (xmin, xmax, ymin, ymax)
#crs        : NA 
#source     : C:/lab/sentinel.png 
#names      : sentinel.1, sentinel.2, sentinel.3, sentinel.4 
#min values :          0,          0,          0,          0 
#max values :        255,        255,        255,        255 

#Associamo l'immagine con la banda del NIR
nir <- sentinel$sentinel.1
#Associamo l'immagine con la banda del red 
red <- sentinel$sentinel.2
#Ora ci calcoliamo NDVI
ndvi <- (nir-red)/(nir+red)
#Visualizziamo l'immagine 
plot(ndvi)
#Cambiamo la color palette 
cl <- colorRampPalette(c('black','white','red','magenta','green'))(100) # 
plot(ndvi,col=cl)

#Calcoliamo la deviazione standard dell'immagine, cioè la variabilità della nostra immagine
#Utilizziamo la funzione focal 
#Calcola i valori focali per le celle focali vicine utilizzando una matrice di pesi, magari in combinazione con una funzione.
#Funzione focal, del davo appena creato ndvi
#Altro argomento a funzione è w che è una matrice di numeri, nel nostro caso una finestra spaziale. Scriviamo le righe e le colonne della nostra matrice 
#Noi consideriamo 9 pixel, 3 righe e 3 colonne per la nostra matrice 
#fun=sd indica che stiamo calcolando la deviazione standard 
ndvisd3 <- focal(ndvi, w=matrix(1/9,nrow=3,ncol=3), fun=sd)
#Fatto ciò possiamo fare il plot della nostra sd 
plot(ndvisd3)
#Cambiamo la color ramp palette e facciamo il plot 
colorRampPalette(c('blue','green','pink','magenta','orange','brown','red','yellow'))(100) # 
plot(ndvisd3, col=clsd)

#Calcoliamo la media della deviazione standard 
ndvimean3 <- focal(ndvi, w=matrix(1/9,nrow=3,ncol=3), fun=mean)
#Facciamo il plottaggio con la stessa palette di prima 
colorRampPalette(c('blue','green','pink','magenta','orange','brown','red','yellow'))(100) # 
plot(ndvimean3, col=clsd)

#Facciamo la deviazione standard per 13pixel 
ndvisd13 <- focal(ndvi, w=matrix(1/169,nrow=13,ncol=13), fun=sd)
colorRampPalette(c('blue','green','pink','magenta','orange','brown','red','yellow'))(100) # 
plot(ndvisd13, col=clsd)

#Andiamo a dare un nome al nostro modello PCA
sentpca <- rasterPCA(sentinel)
#Facciamo il plot 
plot(sentpca$map) #La prima componente principale mantiene la % di info più alta è molto simile all'info originale 
#Man mano che passiamo da una PC all'altra l'informazione va a perdersi 

#Abbiamo quindi fatto l'analisi multivariata della nostra immagine 

summary(sentpca$model) 
#Importance of components:
                         #  Comp.1     Comp.2      Comp.3 Comp.4
#Standard deviation     77.3362848 53.5145531 5.765599616      0
#Proportion of Variance  0.6736804  0.3225753 0.003744348      0
#Cumulative Proportion   0.6736804  0.9962557 1.000000000      1
#La prima componente spiega il 67.36% della variabilità originale


#Day2 
#Per misurare la deviazione standard ovvero la variabilità locale all'interno di una mappa utilizziamo la funziona focal 
sentpca$map
#class      : RasterBrick 
#dimensions : 794, 798, 633612, 4  (nrow, ncol, ncell, nlayers)
#resolution : 1, 1  (x, y)
#extent     : 0, 798, 0, 794  (xmin, xmax, ymin, ymax)
#crs        : NA 
#source     : memory
#names      :       PC1,       PC2,       PC3,       PC4 
#min values : -227.1124, -106.4863,  -74.6048,    0.0000 
#max values : 133.48720, 155.87991,  51.56744,   0.00000 

#L'oggetto pc1 verrà d'ora in avanti utilizzato per applicare la funzione focal 
pc1 <- sentpca$map$PC1 
npc15 <- focal (pc1, w=matrix(1/25, nrow=5, ncol=5), fun=sd) #Deviazione standard a 5x5 pixel
cl <- colorRampPalette(c('blue','green','pink','magenta','orange','brown','red','yellow'))(100) # 
plot(npc15, col=cl)

#Per richiamare un pezzo di codice che abbiamo già creato utilizziamo la funzione source
#Utilizziamo la funzione source per richiamare un codice
source("source_ggplot.r")

#Andiamo a plottare tramite ggplot i nostri dati
#ggplot crea una finestra vuota 
#Creare punti dentro ggplot -> geom_point
#Creare delle linee -> geom_line
#geom_raster -> crea la mappa 
ggplot() +
geom_raster(npc15, mapping = aes(x = x, y = y, fill = layer)) + #nome della mappa, inseriamo poi le estetiche, ovvero i valori  
scale_fill_viridis() +
ggtitle ("Standard deviation of PC1 bu viridis colour scale")
# The package contains eight color scales: “viridis”, the primary choice, and five alternatives with similar properties - “magma”, “plasma”, “inferno”, “civids”, “mako”, and “rocket” -, and a rainbow color map - “turbo”. 
#scale_fill_viridis lo utilizziamo per le leggende dei colori 

p1 <- ggplot() +
geom_raster(npc15, mapping = aes(x = x, y = y, fill = layer)) + #nome della mappa, inseriamo poi le estetiche, ovvero i valori  
scale_fill_viridis() +
ggtitle ("Standard deviation of PC1 bu viridis colour scale")

#Metto un'altra leggenda di colore di viridis =magma     
p2 <- ggplot() +
geom_raster(npc15, mapping = aes(x = x, y = y, fill = layer)) +
scale_fill_viridis(option = "magma")  +
ggtitle("Standard deviation of PC1 by magma colour scale")

#Metto un'altra leggenda di colore di viridis = inferno
p3 <- ggplot() +
geom_raster(npc15, mapping = aes(x = x, y = y, fill = layer)) +
scale_fill_viridis(option = "inferno")  +
ggtitle("Standard deviation of PC1 by inferno colour scale")

#Plotto tutte le tre immagini insieme 
grid.arrange(p1, p2, p3, nrow =1)









